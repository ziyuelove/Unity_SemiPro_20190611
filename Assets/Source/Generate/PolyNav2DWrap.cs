//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class PolyNav2DWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(PolyNav2D), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("AddObstacle", AddObstacle);
		L.RegFunction("RemoveObstacle", RemoveObstacle);
		L.RegFunction("FindPath", FindPath);
		L.RegFunction("GenerateMap", GenerateMap);
		L.RegFunction("CheckLOS", CheckLOS);
		L.RegFunction("PointIsValid", PointIsValid);
		L.RegFunction("InflatePolygon", InflatePolygon);
		L.RegFunction("PointIsConcave", PointIsConcave);
		L.RegFunction("SegmentsCross", SegmentsCross);
		L.RegFunction("PointInsidePolygon", PointInsidePolygon);
		L.RegFunction("GetCloserEdgePoint", GetCloserEdgePoint);
		L.RegFunction("CreatePolyNav2D", CreatePolyNav2D);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("generateOnUpdate", get_generateOnUpdate, set_generateOnUpdate);
		L.RegVar("navObstacles", get_navObstacles, set_navObstacles);
		L.RegVar("inflateRadius", get_inflateRadius, set_inflateRadius);
		L.RegVar("regenerateFlag", get_regenerateFlag, set_regenerateFlag);
		L.RegVar("current", get_current, null);
		L.RegVar("nodesCount", get_nodesCount, null);
		L.RegVar("pendingRequest", get_pendingRequest, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddObstacle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			PolyNavObstacle arg0 = (PolyNavObstacle)ToLua.CheckObject<PolyNavObstacle>(L, 2);
			obj.AddObstacle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveObstacle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			PolyNavObstacle arg0 = (PolyNavObstacle)ToLua.CheckObject<PolyNavObstacle>(L, 2);
			obj.RemoveObstacle(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			System.Action<UnityEngine.Vector2[],bool> arg2 = (System.Action<UnityEngine.Vector2[],bool>)ToLua.CheckDelegate<System.Action<UnityEngine.Vector2[],bool>>(L, 4);
			obj.FindPath(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.GenerateMap(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckLOS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			bool o = obj.CheckLOS(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PointIsValid(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			bool o = obj.PointIsValid(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InflatePolygon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 1);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector2[] o = PolyNav2D.InflatePolygon(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PointIsConcave(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			bool o = PolyNav2D.PointIsConcave(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SegmentsCross(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 1);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
			UnityEngine.Vector2 arg2 = ToLua.ToVector2(L, 3);
			UnityEngine.Vector2 arg3 = ToLua.ToVector2(L, 4);
			bool o = PolyNav2D.SegmentsCross(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PointInsidePolygon(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Vector2[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector2>(L, 1);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 2);
			bool o = PolyNav2D.PointInsidePolygon(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCloserEdgePoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			PolyNav2D obj = (PolyNav2D)ToLua.CheckObject<PolyNav2D>(L, 1);
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			UnityEngine.Vector2 o = obj.GetCloserEdgePoint(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreatePolyNav2D(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			//PolyNav2D.CreatePolyNav2D();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_generateOnUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			bool ret = obj.generateOnUpdate;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index generateOnUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_navObstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			System.Collections.Generic.List<PolyNavObstacle> ret = obj.navObstacles;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index navObstacles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inflateRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			float ret = obj.inflateRadius;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inflateRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_regenerateFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			bool ret = obj.regenerateFlag;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index regenerateFlag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_current(IntPtr L)
	{
		try
		{
			ToLua.Push(L, PolyNav2D.current);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodesCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			int ret = obj.nodesCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index nodesCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pendingRequest(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			bool ret = obj.pendingRequest;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pendingRequest on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_generateOnUpdate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.generateOnUpdate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index generateOnUpdate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_navObstacles(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			System.Collections.Generic.List<PolyNavObstacle> arg0 = (System.Collections.Generic.List<PolyNavObstacle>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<PolyNavObstacle>));
			obj.navObstacles = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index navObstacles on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inflateRadius(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.inflateRadius = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inflateRadius on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_regenerateFlag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			PolyNav2D obj = (PolyNav2D)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.regenerateFlag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index regenerateFlag on a nil value");
		}
	}
}

