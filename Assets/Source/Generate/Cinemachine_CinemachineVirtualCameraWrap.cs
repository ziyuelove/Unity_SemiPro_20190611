//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Cinemachine_CinemachineVirtualCameraWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Cinemachine.CinemachineVirtualCamera), typeof(Cinemachine.CinemachineVirtualCameraBase));
		L.RegFunction("UpdateCameraState", UpdateCameraState);
		L.RegFunction("InvalidateComponentPipeline", InvalidateComponentPipeline);
		L.RegFunction("GetComponentOwner", GetComponentOwner);
		L.RegFunction("GetComponentPipeline", GetComponentPipeline);
		L.RegFunction("GetCinemachineComponent", GetCinemachineComponent);
		L.RegFunction("OnPositionDragged", OnPositionDragged);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_LookAt", get_m_LookAt, set_m_LookAt);
		L.RegVar("m_Follow", get_m_Follow, set_m_Follow);
		L.RegVar("m_Lens", get_m_Lens, set_m_Lens);
		L.RegVar("PipelineName", get_PipelineName, null);
		L.RegVar("CreatePipelineOverride", get_CreatePipelineOverride, set_CreatePipelineOverride);
		L.RegVar("DestroyPipelineOverride", get_DestroyPipelineOverride, set_DestroyPipelineOverride);
		L.RegVar("State", get_State, null);
		L.RegVar("LookAt", get_LookAt, set_LookAt);
		L.RegVar("Follow", get_Follow, set_Follow);
		L.RegVar("UserIsDragging", get_UserIsDragging, set_UserIsDragging);
		L.RegFunction("DestroyPipelineDelegate", Cinemachine_CinemachineVirtualCamera_DestroyPipelineDelegate);
		L.RegFunction("CreatePipelineDelegate", Cinemachine_CinemachineVirtualCamera_CreatePipelineDelegate);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCameraState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.UpdateCameraState(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InvalidateComponentPipeline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			obj.InvalidateComponentPipeline();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentOwner(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Transform o = obj.GetComponentOwner();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetComponentPipeline(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			Cinemachine.CinemachineComponentBase[] o = obj.GetComponentPipeline();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCinemachineComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			Cinemachine.CinemachineCore.Stage arg0 = (Cinemachine.CinemachineCore.Stage)ToLua.CheckObject(L, 2, typeof(Cinemachine.CinemachineCore.Stage));
			Cinemachine.CinemachineComponentBase o = obj.GetCinemachineComponent(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnPositionDragged(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)ToLua.CheckObject<Cinemachine.CinemachineVirtualCamera>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.OnPositionDragged(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.m_LookAt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.m_Follow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_Lens(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.LensSettings ret = obj.m_Lens;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Lens on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PipelineName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, Cinemachine.CinemachineVirtualCamera.PipelineName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreatePipelineOverride(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DestroyPipelineOverride(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_State(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.CameraState ret = obj.State;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index State on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.LookAt;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform ret = obj.Follow;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UserIsDragging(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			bool ret = obj.UserIsDragging;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserIsDragging on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.m_LookAt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.m_Follow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_Lens(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			Cinemachine.LensSettings arg0 = StackTraits<Cinemachine.LensSettings>.Check(L, 2);
			obj.m_Lens = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index m_Lens on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_CreatePipelineOverride(IntPtr L)
	{
		try
		{
			Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate arg0 = (Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate)ToLua.CheckDelegate<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>(L, 2);
			Cinemachine.CinemachineVirtualCamera.CreatePipelineOverride = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_DestroyPipelineOverride(IntPtr L)
	{
		try
		{
			Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate arg0 = (Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate)ToLua.CheckDelegate<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>(L, 2);
			Cinemachine.CinemachineVirtualCamera.DestroyPipelineOverride = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_LookAt(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.LookAt = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LookAt on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Follow(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			UnityEngine.Transform arg0 = (UnityEngine.Transform)ToLua.CheckObject<UnityEngine.Transform>(L, 2);
			obj.Follow = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Follow on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UserIsDragging(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Cinemachine.CinemachineVirtualCamera obj = (Cinemachine.CinemachineVirtualCamera)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.UserIsDragging = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index UserIsDragging on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cinemachine_CinemachineVirtualCamera_DestroyPipelineDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.DestroyPipelineDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Cinemachine_CinemachineVirtualCamera_CreatePipelineDelegate(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>.Create(func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateTraits<Cinemachine.CinemachineVirtualCamera.CreatePipelineDelegate>.Create(func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

