//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Spine_AnimationWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Spine.Animation), typeof(System.Object));
		L.RegFunction("Apply", Apply);
		L.RegFunction("New", _CreateSpine_Animation);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Timelines", get_Timelines, set_Timelines);
		L.RegVar("Duration", get_Duration, set_Duration);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSpine_Animation(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Spine.ExposedList<Spine.Timeline> arg1 = (Spine.ExposedList<Spine.Timeline>)ToLua.CheckObject<Spine.ExposedList<Spine.Timeline>>(L, 2);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 3);
				Spine.Animation obj = new Spine.Animation(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Spine.Animation.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Apply(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			Spine.Animation obj = (Spine.Animation)ToLua.CheckObject<Spine.Animation>(L, 1);
			Spine.Skeleton arg0 = (Spine.Skeleton)ToLua.CheckObject<Spine.Skeleton>(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			Spine.ExposedList<Spine.Event> arg4 = (Spine.ExposedList<Spine.Event>)ToLua.CheckObject<Spine.ExposedList<Spine.Event>>(L, 6);
			float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
			Spine.MixPose arg6 = (Spine.MixPose)ToLua.CheckObject(L, 8, typeof(Spine.MixPose));
			Spine.MixDirection arg7 = (Spine.MixDirection)ToLua.CheckObject(L, 9, typeof(Spine.MixDirection));
			obj.Apply(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Animation obj = (Spine.Animation)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Timelines(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Animation obj = (Spine.Animation)o;
			Spine.ExposedList<Spine.Timeline> ret = obj.Timelines;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timelines on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Animation obj = (Spine.Animation)o;
			float ret = obj.Duration;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Duration on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Timelines(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Animation obj = (Spine.Animation)o;
			Spine.ExposedList<Spine.Timeline> arg0 = (Spine.ExposedList<Spine.Timeline>)ToLua.CheckObject<Spine.ExposedList<Spine.Timeline>>(L, 2);
			obj.Timelines = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Timelines on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Duration(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Spine.Animation obj = (Spine.Animation)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Duration = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Duration on a nil value");
		}
	}
}

